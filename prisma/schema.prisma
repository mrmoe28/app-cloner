// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model for authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?  // For credential-based authentication
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  projects Project[]

  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core application models

model Project {
  id          String        @id @default(cuid())
  userId      String        @map("user_id")
  name        String
  description String?
  status      ProjectStatus @default(UPLOADED)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  uploadedImage  UploadedImage?
  analysis       Analysis?
  generatedCode  GeneratedCode?

  @@map("projects")
}

model UploadedImage {
  id         String   @id @default(cuid())
  projectId  String   @unique @map("project_id")
  fileName   String   @map("file_name")
  fileSize   Int      @map("file_size")
  mimeType   String   @map("mime_type")
  filePath   String   @map("file_path")
  preview    String?
  uploadedAt DateTime @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("uploaded_images")
}

model Analysis {
  id                String      @id @default(cuid())
  projectId         String      @unique @map("project_id")
  platformDetection String      @map("platform_detection") // JSON
  components        String      // JSON array of UIComponent
  layoutStructure   String      @map("layout_structure") // JSON
  designTokens      String      @map("design_tokens") // JSON
  confidence        Float
  processingTime    Int         @map("processing_time") // milliseconds
  reasoning         String?
  createdAt         DateTime    @default(now())

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("analyses")
}

model GeneratedCode {
  id               String           @id @default(cuid())
  projectId        String           @unique @map("project_id")
  platform         PlatformType
  framework        FrameworkType
  packageJson      String           @map("package_json") // JSON
  deploymentConfig String           @map("deployment_config") // JSON
  createdAt        DateTime         @default(now())

  // Relations
  project Project        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  files   GeneratedFile[]

  @@map("generated_code")
}

model GeneratedFile {
  id              String        @id @default(cuid())
  generatedCodeId String        @map("generated_code_id")
  path            String
  content         String
  type            FileType

  // Relations
  generatedCode GeneratedCode @relation(fields: [generatedCodeId], references: [id], onDelete: Cascade)

  @@map("generated_files")
}

// Enums

enum ProjectStatus {
  UPLOADED
  ANALYZING
  ANALYZED
  GENERATING
  GENERATED
  COMPLETED
  FAILED
}

enum PlatformType {
  WEB
  MOBILE
  DESKTOP
  TABLET
}

enum FrameworkType {
  REACT
  REACT_NATIVE
  FLUTTER
  VUE
  ANGULAR
  SVELTE
  NATIVE_IOS
  NATIVE_ANDROID
  XAMARIN
  IONIC
  CORDOVA
}

enum FileType {
  COMPONENT
  API
  CONFIG
  STYLE
  SCHEMA
  PAGE
}